import React from "react";
import { useContext } from "react";
import ResetButton from "../../../../../Common Components/Buttons/ResetButton";
import Box from "@mui/material/Box";
import Table from "@mui/material/Table";
import TableCell from "@mui/material/TableCell";
import TableContainer from "@mui/material/TableContainer";
import TableHead from "@mui/material/TableHead";
import TableRow from "@mui/material/TableRow";
import TableBody from "@mui/material/TableBody";
import Paper from "@mui/material/Paper";
import { useForm } from "react-hook-form";
import OnClickSaveButton from "../../../../../Common Components/Buttons/OnClickSaveButton";
import CommonBackDrop from "../../../../../Common Components/CommonBackDrop/CommonBackDrop";
import ConfirmationModal from "../../../../../Common Components/ConfirmationModal";
import { VisitContext } from "../../ClinicalCareChart";
import {
  getPatientVulnerabilityInfo,
  addNewPatientVulnerability,
} from "../../../services/nursingServices/painAssessment/PainAssessmentService";
import CheckBoxField from "../../../../../Common Components/FormFields/CheckBoxField";

const data = {
  result: [
    {
      markasappropriate: "History of Previous Falls",
    },
    {
      markasappropriate: "Patient Who Are Above 65 years.",
    },
    {
      markasappropriate: "Below Age of 16 years.",
    },
    {
      markasappropriate:
        "Patients with Physical LimitationsBoth Visual and Mobility.",
    },
    {
      markasappropriate: "Patients With Cerebral vasculr Accident (CVA).",
    },
    {
      markasappropriate:
        "Patients Who Have Postural Hypotension and Dizziness / Vertigo.",
    },
    {
      markasappropriate: "Emotionally Disturbed / psychiatric Pts.",
    },
    {
      markasappropriate: "Patients With Visual/ hearing Defects.",
    },
    {
      markasappropriate: "Post Operative in the last 24 hours.",
    },
    {
      markasappropriate: "Terminally ill.",
    },
    {
      markasappropriate: "Experiencing pain.",
    },
    {
      markasappropriate: "Women in labour.",
    },
    {
      markasappropriate: "Victim of Suspected drug/ Substance Abuse.",
    },
    {
      markasappropriate: "Patient Fall Assessment score of >51.",
    },
  ],
};

function PatientVulnerabilityCriteria() {
  const { control, handleSubmit } = useForm({
    // resolver: yupResolver(schema),
    defaultValues: {
      "History of Previous Falls": false,

      "Patient Who Are Above 65 years.": false,

      "Below Age of 16 years.": false,

      "Patients with Physical LimitationsBoth Visual and Mobility.": false,

      "Patients With Cerebral vasculr Accident (CVA).": false,

      "Patients Who Have Postural Hypotension and Dizziness / Vertigo.": false,

      "Emotionally Disturbed / psychiatric Pts.": false,

      "Patients With Visual/ hearing Defects.": false,

      "Post Operative in the last 24 hours.": false,

      "Terminally ill.": false,

      "Experiencing pain.": false,

      "Women in labour.": false,

      "Victim of Suspected drug/ Substance Abuse.": false,

      "Patient Fall Assessment score of >51.": false,
    },
  });

  //state variable to close the confirmation modal for POST request
  const closeAddConfirmation = () => {
    if (openPostConfirmation) {
      setPostConfirmation(false);
    }
  };

  //state variable to close the confirmation modal for PUT request
  const closeUpdateConfirmation = () => {
    if (openUpdateConfirmation) {
      setUpdateConfirmation(false);
    }
  };

  //event listener function for the Add button of the confirmation modal
  function addNewVulnerabilityInfo() {
    //Close the confirmation modal
    closeAddConfirmation();

    setOpenBackdrop(true);

    console.log("The Add button of the confirmation modal has been clicked");

    //post request
    addNewPatientVulnerability(formData)
      .then((response) => {
        setOpenBackdrop(false);
        // successAlert(result.data.message);
        console.log("The response of the post request is ", response);
      })
      .catch((error) => {
        // errorAlert(error.message);
        setOpenBackdrop(false);
      });
  }

  //event listener function for the Update button of the confirmation modal
  function updatePatientVulnerability() {
    //Close the confirmation modal
    closeUpdateConfirmation();

    setOpenBackdrop(true);

    console.log("The Update button of the confirmation modal has been clicked");

    console.log("formData in updatePatientInfo function is ", formData);

    //post request
    //post request
    addNewPatientVulnerability(formData)
      .then((response) => {
        setOpenBackdrop(false);
        // successAlert(result.data.message);
        console.log("The response of the post request is ", response);
      })
      .catch((error) => {
        // errorAlert(error.message);
        setOpenBackdrop(false);
      });
  }

  // Context
  const patientVisitId = useContext(VisitContext);

  const [
    patientVulnerabilityInfo,
    setPatientVulnerabilityInfo,
  ] = React.useState("");

  const [openBackdrop, setOpenBackdrop] = React.useState(false);

  const [formData, setFormData] = React.useState({});

  const [existingPatientId, setExistingPatientId] = React.useState(null);

  //state variable to open the confirmation modal adding the patient data
  const [openPostConfirmation, setPostConfirmation] = React.useState(false);

  //state variable to open and close the confirmation modal for updation
  const [openUpdateConfirmation, setUpdateConfirmation] = React.useState(false);

  // //useEffect to fetch the information , if it exists
  React.useEffect(() => {
    //get the patient fall assessment information , if the patientVisitID exists
    getPatientVulnerabilityInfo(patientVisitId)
      .then((response) => {
        console.log("Patient vulenrability information is ", response);

        //if the result is empty then open the confirmation modal for adding the record
        //if the result is not empty then open the confirmation modal for updating the record
        if (response.data.hasOwnProperty("result")) {
          setPatientVulnerabilityInfo(response.data.result);
          setExistingPatientId(response.data.result.id);
        }
      })
      .catch((error) => {
        console.log("error object is ", error);
      });
  }, []);

  function onSubmitDataHandler(data) {
    console.log("The form data is ", data);
    let vulnerabilities = [];

    //preparing the vulnerabilities array
    for (let propertyName in data) {
      if (data[propertyName] === true) {
        vulnerabilities.push(propertyName);
      }
    }

    let postObj;

    if (patientVulnerabilityInfo === "" && existingPatientId === null) {
      postObj = {
        id: null,
        visitId: patientVisitId,
        vulnerabilities: vulnerabilities,
      };

      //open the confirmation modal for adding new patient
      setPostConfirmation(true);
      setFormData(postObj);
    } else if (patientVulnerabilityInfo !== "" && existingPatientId !== null) {
      postObj = {
        id: existingPatientId,
        visitId: patientVisitId,
        vulnerabilities: vulnerabilities,
      };

      //open the confirmation modal for updating the patient data
      setUpdateConfirmation(true);
      setFormData(postObj);
    }

    console.log("postObj is ", postObj);
  }

  return (
    <div className="w-full mx-2">
      <div className="w-auto grid mx-2">
        <Box sx={{ width: "100%", overflow: "hidden" }}>
          <Paper sx={{ width: "100%", my: 2 }}>
            <form
              className="w-full "
              onSubmit={handleSubmit(onSubmitDataHandler)}
            >
              <TableContainer sx={{ marginTop: "0rem" }} className="rounded ">
                <Table size="small">
                  <TableHead>
                    <TableRow
                      sx={{
                        "& th": {
                          paddingY: 0.5,
                          backgroundColor: "#F1F1F1",
                        },
                      }}
                    >
                      <TableCell style={{ borderLeft: "1px solid lightGray" }}>
                        <span className="font-bold whitespace-nowrap">
                          Mark as Appropriate
                        </span>
                      </TableCell>

                      <TableCell style={{ borderRight: "1px solid lightGray" }}>
                        <span className="font-bold whitespace-nowrap">
                          Mark
                        </span>
                      </TableCell>
                    </TableRow>
                  </TableHead>

                  <TableBody>
                    {data.result.map((row, index) => {
                      return (
                        <TableRow
                          sx={{
                            "& td": {
                              paddingY: 0,
                            },
                          }}
                        >
                          <TableCell
                            className="whitespace-nowrap"
                            style={{ borderLeft: "1px solid lightGray" }}
                          >
                            <span className="">{row.markasappropriate}</span>
                          </TableCell>

                          <TableCell
                            className="whitespace-nowrap"
                            style={{ borderRight: "1px solid lightGray" }}
                          >
                            <span className="">
                              <CheckBoxField
                                control={control}
                                name={row.markasappropriate}
                                label=""
                              />
                            </span>
                          </TableCell>
                        </TableRow>
                      );
                    })}
                  </TableBody>
                </Table>
              </TableContainer>

              <div className="border border-b border-customBlue mx-2"> </div>

              <div className="flex gap-2 justify-end mt-3 mx-2">
                <ResetButton onClick={() => reset(defaultValues)} />
                <OnClickSaveButton
                  onClick={() => {
                    handleSubmit(onSubmitDataHandler)();
                  }}
                />
              </div>
            </form>
          </Paper>
        </Box>
      </div>
      {/* Backdrop component to disable the screen after submitting the form */}
      <CommonBackDrop openBackdrop={openBackdrop} />

      {/* Confirmation modal for PUT request */}
      <ConfirmationModal
        confirmationOpen={openUpdateConfirmation}
        confirmationHandleClose={closeUpdateConfirmation}
        confirmationSubmitFunc={updatePatientVulnerability}
        confirmationLabel="Confirmation"
        confirmationMsg="Are you sure you want to update this assessment ?"
        confirmationButtonMsg="Update"
      />

      {/* Confirmation modal for POST request */}
      <ConfirmationModal
        confirmationOpen={openPostConfirmation}
        confirmationHandleClose={closeAddConfirmation}
        confirmationSubmitFunc={addNewVulnerabilityInfo}
        confirmationLabel="Confirmation"
        confirmationMsg="Are you sure you want to add this record ?"
        confirmationButtonMsg="Add"
      />
    </div>
  );
}

export default PatientVulnerabilityCriteria;
