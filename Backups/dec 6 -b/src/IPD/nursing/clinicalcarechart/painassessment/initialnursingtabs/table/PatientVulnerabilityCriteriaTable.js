import * as React from "react";
import { useContext } from "react";
import Box from "@mui/material/Box";
import Table from "@mui/material/Table";
import TableCell from "@mui/material/TableCell";
import TableContainer from "@mui/material/TableContainer";
import TableHead from "@mui/material/TableHead";
import TableRow from "@mui/material/TableRow";
import TableBody from "@mui/material/TableBody";
import { useForm } from "react-hook-form";
import Paper from "@mui/material/Paper";
import ResetButton from "../../../../../../Common Components/Buttons/ResetButton";
import OnClickSaveButton from "../../../../../../Common Components/Buttons/OnClickSaveButton";
import CommonBackDrop from "../../../../../../Common Components/CommonBackDrop/CommonBackDrop";
import ConfirmationModal from "../../../../../../Common Components/ConfirmationModal";
import { VisitContext } from "../../../ClinicalCareChart";
import { getPatientVulnerabilityInfo } from "../../../../services/nursingServices/painAssessment/PainAssessmentService";
import CheckBoxField from "../../../../../../Common Components/FormFields/CheckBoxField";
const data = {
  result: [
    {
      markasappropriate: "History of Previous Falls",
      name: "checkOne",
    },
    {
      markasappropriate: "Patient Who Are Above 65 years.",
      name: "checkTwo",
    },
    {
      markasappropriate: "Below Age of 16 years.",
      name: "checkThree",
    },
    {
      markasappropriate:
        "Patients with Physical LimitationsBoth Visual and Mobility.",
      name: "checkFour",
    },
    {
      markasappropriate: "Patients With Cerebral vasculr Accident (CVA).",
      name: "checkFive",
    },
    {
      markasappropriate:
        "Patients Who Have Postural Hypotension and Dizziness / Vertigo.",
      name: "checkSix",
    },
    {
      markasappropriate: "Emotionally Disturbed / psychiatric Pts.",
      name: "checkSeven",
    },
    {
      markasappropriate: "Patients With Visual/ hearing Defects.",
      name: "checkEight",
    },
    {
      markasappropriate: " Post Operative in the last 24 hours.",
      name: "checkNine",
    },
    {
      markasappropriate: "Terminally ill.",
      name: "checkTen",
    },
    {
      markasappropriate: "Experiencing pain.",
      name: "checkEleven",
    },
    {
      markasappropriate: "Women in labour.",
      name: "checkTweleve",
    },
    {
      markasappropriate: "Victim of Suspected drug/ Substance Abuse.",
      name: "checkThirteen",
    },
    {
      markasappropriate: "Patient Fall Assessment score of >51. ",
      name: "checkFourteen",
    },
  ],
};

export default function PatientVulnerabilityCriteriaTable() {
  //destructuring the methods and giving them the same name , as they have in the useForm() hook
  const { control } = useForm({
    // resolver: yupResolver(schema),
    defaultValues: {
      highRisk: [],
      lowRisk: [],
    },
  });

  //state variable to close the confirmation modal for POST request
  // const closeAddConfirmation = () => {
  //   if (openPostConfirmation) {
  //     setPostConfirmation(false);
  //   }
  // };

  //state variable to close the confirmation modal for PUT request
  // const closeUpdateConfirmation = () => {
  //   if (openUpdateConfirmation) {
  //     setUpdateConfirmation(false);
  //   }
  // };

  //event listener function for the Add button of the confirmation modal
  // function addNewPatientVulnerabilityInfo() {
  //   //Close the confirmation modal
  //   closeAddConfirmation();

  //   setOpenBackdrop(true);

  //   console.log("The Add button of the confirmation modal has been clicked");

  //   //post request
  //   addNewPatientAssessment(formData)
  //     .then((response) => {
  //       setOpenBackdrop(false);
  //       console.log("The response of the painassessment service is", response);
  //     })
  //     .catch((error) => {
  //       setOpenBackdrop(false);
  //       console.log("The error of the painassessment service is  ", error);
  //     });
  // }

  //event listener function for the Update button of the confirmation modal
  // function updatePatientVulnerabilityInfo() {
  //   //Close the confirmation modal
  //   closeUpdateConfirmation();

  //   setOpenBackdrop(true);

  //   console.log("The Update button of the confirmation modal has been clicked");

  //   console.log("formData in updatePatientInfo function is ", formData);

  //   //Post request
  //   addNewPatientAssessment(formData)
  //     .then((response) => {
  //       setOpenBackdrop(false);
  //       // successAlert(result.data.message);
  //       console.log("The response of the post request is ", response);
  //     })
  //     .catch((error) => {
  //       // errorAlert(error.message);
  //       setOpenBackdrop(false);
  //     });
  // }

  const [openBackdrop, setOpenBackdrop] = React.useState(false);

  const [formData, setFormData] = React.useState({});

  const [existingPatientId, setExistingPatientId] = React.useState(null);

  //state variable to open the confirmation modal adding the patient data
  const [openPostConfirmation, setPostConfirmation] = React.useState(false);

  //state variable to open and close the confirmation modal for updation
  const [openUpdateConfirmation, setUpdateConfirmation] = React.useState(false);

  // Context
  const patientVisitId = useContext(VisitContext);

  const [
    patientVulnerabilityInfo,
    setPatientVulnerabilityInfo,
  ] = React.useState("");

  console.log("patientVisitId is ", patientVisitId);

  //useEffect to fetch the information , if it exists
  React.useEffect(() => {
    //get the patient fall assessment information , if the patientVisitID exists
    if (patientVisitId) {
      getPatientVulnerabilityInfo(patientVisitId).then((response) => {
        console.log("patient Vulnerability information is ", response);

        //if the result is empty then open the confirmation modal for adding the record
        //if the result is not empty then open the confirmation modal for updating the record
        if (response.data.hasOwnProperty("result")) {
          setPatientVulnerabilityInfo(response.data.result);
          setExistingPatientId(response.data.result.id);
        }
      });
    }
  }, []);

  React.useEffect(() => {
    console.log("existingPatientId is ", existingPatientId);
  }, [existingPatientId]);

  // let postObj = {
  //   dateTime: "2022-11-29T09:22:19.759Z",
  //   id: "string",
  //   visitId: 0,
  //   vulnerabilities: ["string"],
  // };

  return (
    <>
      <div className="w-auto grid mx-2">
        <Box sx={{ width: "100%", overflow: "hidden" }}>
          <Paper sx={{ width: "100%", my: 2 }}>
            <form className="w-full ">
              <TableContainer sx={{ marginTop: "0rem" }} className="rounded ">
                <Table size="small">
                  <TableHead>
                    <TableRow
                      sx={{
                        "& th": {
                          paddingY: 0.5,
                          backgroundColor: "#F1F1F1",
                        },
                      }}
                    >
                      <TableCell style={{ borderLeft: "1px solid lightGray" }}>
                        <span className="font-bold whitespace-nowrap">
                          Mark as Appropriate
                        </span>
                      </TableCell>

                      <TableCell style={{ borderRight: "1px solid lightGray" }}>
                        <span className="font-bold whitespace-nowrap">
                          Mark
                        </span>
                      </TableCell>
                    </TableRow>
                  </TableHead>

                  <TableBody>
                    {data.result.map((row, index) => {
                      return (
                        <TableRow
                          sx={{
                            "& td": {
                              paddingY: 0,
                            },
                          }}
                        >
                          <TableCell
                            className="whitespace-nowrap"
                            style={{ borderLeft: "1px solid lightGray" }}
                          >
                            <span className="">{row.markasappropriate}</span>
                          </TableCell>

                          <TableCell
                            className="whitespace-nowrap"
                            style={{ borderRight: "1px solid lightGray" }}
                          >
                            <span className="">
                              <CheckBoxField
                                control={control}
                                name={row.name}
                                label=""
                                vlue="checkBox"
                              />
                            </span>
                          </TableCell>
                        </TableRow>
                      );
                    })}
                  </TableBody>
                </Table>
              </TableContainer>
            </form>
          </Paper>
        </Box>
      </div>
    </>
  );
}
